[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "iris-classification-tutorial"
description = "Complete Machine Learning Tutorial for Iris Flower Classification"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.7"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Education", 
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8", 
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Education",
]
keywords = ["machine-learning", "classification", "iris", "tutorial", "sklearn", "data-science"]
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "scikit-learn>=1.0.0",
    "matplotlib>=3.4.0",
    "seaborn>=0.11.0",
    "joblib>=1.0.0",
    "pyyaml>=5.4.0",
    "python-dotenv>=0.19.0",
    "click>=8.0.0",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/yourusername/iris-classification-tutorial"
Repository = "https://github.com/yourusername/iris-classification-tutorial"
Documentation = "https://github.com/yourusername/iris-classification-tutorial/blob/main/README.md"
"Bug Tracker" = "https://github.com/yourusername/iris-classification-tutorial/issues"
Changelog = "https://github.com/yourusername/iris-classification-tutorial/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
    "pytest-mock>=3.6.0",
    "flake8>=3.9.0",
    "black>=21.0.0", 
    "isort>=5.9.0",
    "mypy>=0.910",
    "pre-commit>=2.15.0",
    "safety>=1.10.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "myst-parser>=0.15.0",
    "sphinx-autoapi>=1.8.0",
]
notebook = [
    "jupyter>=1.0.0",
    "jupyterlab>=3.0.0",
    "ipykernel>=6.0.0",
    "ipywidgets>=7.6.0",
]
viz = [
    "plotly>=5.0.0",
    "bokeh>=2.3.0",
]
ml-extra = [
    "xgboost>=1.4.0",
    "lightgbm>=3.2.0",
    "optuna>=2.10.0",
    "shap>=0.39.0",
]

[project.scripts]
iris-train = "src.scripts.train_model:main"
iris-predict = "src.scripts.predict:main"
iris-evaluate = "src.scripts.evaluate:main"

[tool.setuptools]
packages = ["src"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt"]

[tool.setuptools_scm]
write_to = "src/_version.py"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration  
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config", 
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/setup.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "joblib.*",
]
ignore_missing_imports = true

# Flake8 configuration (in setup.cfg or .flake8 file)
# Added here for reference
[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "W503",  # line break before binary operator
    "E501",  # line too long (handled by black)
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:D100,D101,D102,D103,D104",  # missing docstrings in tests
]